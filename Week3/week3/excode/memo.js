/**
 <jsx>
 
 jsx = javascript XML의 줄임말
 react에서는 컴포넌트를 만들 때 jsx로 ui를 작성하는게 일반적

 react 컴포넌트에서는 return 시, 반드시 하나의 jsx요소를 반환해야하기 때문에 여러 개의 요소를 포함하려면 항상 부모 요소로 감싸야한다.
 -> 이 부모 요소는 <div> <section> <main> 같은 실제 태그일 수도 있고, <>같은 fragment를 사용할 수도 있다.
 fragment = 여러 요소를 감쌀 수 있는 가상의 부모 요소 -> 실제 DOM에는 아무것도 렌더링되지 않는다.
 -> 왜 사용하냐? <div>로 감싸면 태그가 남는데 이런 태그조차 남기고 싶지 않을 때 사용

 변수나 함수등을 중괄호로 감싸서 사용할 수 있다.

 Component = ui를 독립적으로, 재사용 가능하게 나눈 기본 단위
 하나의 컴포넌트는 또 다른 여러 개의 컴포넌트의 조합으로 구성될 수 있다.
 컴포넌트는 함수처럼 동작 -> 입력(props)을 받고 결과(jsx = react 요소)를 반환하는 구조

 Props(properties)는 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하는 방법

 Styled Components는 react에서 스타일을 다루는 css in js 라이브러리
 컴포넌트 단위로 스타일을 관리 -> 중복 문제를 방지할 수 있다.
 기존 css 파일 없이도 컴포넌트 안에서 스타일을 선언하고 사용 가능

 Hook이란 함수형 컴포넌트에서 React 기능을 사용할 수 있게 하는 함수
 모든 Hook 이름은 use로 시작한다.

 useState란 컴포넌트 안에서 상태값(state)를 만들고 그 상태를 변경할 수 있는 함수를 함께 제공하는 Hook
 const [state, setState] = useState(초기값);에서
 state: 현재 값, setState: 값을 바꾸는 함수, useState(초기값): 상태의 초기값을 설정
 -> 상태가 바뀌면 자동으로 컴포넌트가 다시 렌더링된다.

 이벤트 핸들링이란 사용자의 행동(이벤트)에 반응해서 어떤 동작을 실행하는 것
 이벤트: 사용자 행동, 핸들링: 그 이벤트에 반응해서 동작하는 것, 이벤트핸들러: 그 이벤트가 발생했을 때 실행할 함수
 */